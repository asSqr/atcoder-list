{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TextArea","styled","textarea","Wrapper","div","Header","StyledIFrame","iframe","Button","App","React","useState","undefined","user_id","set_user_id","submissions","set_submissions","fetch_user_submissions","a","fetch_url","fetch","res","json","user_submissions","console","log","error","onClick","e","target","value","map","sub","idx","title","problem_id","src","contest_id","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"yqCAKA,IAKMA,EAAWC,IAAOC,SAAV,KAIRC,EAAUF,IAAOG,IAAV,KAQPC,EAASJ,IAAOG,IAAV,IAhBH,4BA8BHE,EAAeL,IAAOM,OAAV,KAOEN,YAAOO,IAAPP,CAAH,KA6CFQ,MAvCf,WAAgB,IAAD,EACkBC,IAAMC,cAASC,GADjC,mBACNC,EADM,KACGC,EADH,OAE0BJ,IAAMC,SAAS,IAFzC,mBAENI,EAFM,KAEOC,EAFP,KAIPC,EAAsB,uCAAG,gCAAAC,EAAA,sEAErBC,EAFqB,gEAEgDN,GAFhD,SAGTO,MAAMD,GAHG,cAGrBE,EAHqB,gBAIIA,EAAIC,OAJR,OAIrBC,EAJqB,OAM3BC,QAAQC,IAAIF,GAEZP,EAAgBO,GARW,kDAU3BC,QAAQE,MAAR,MAV2B,0DAAH,qDAc5B,OACE,kBAACvB,EAAD,KACE,kBAACE,EAAD,kDAGE,kBAACL,EAAD,CAAU2B,QAAS,SAAAC,GAAC,OAAId,EAAYc,EAAEC,OAAOC,UAE7C,kBAACtB,EAAA,EAAD,CAAQmB,QAAO,sBAAE,sBAAAT,EAAA,sEAAoBD,IAApB,4CAAjB,0BAGDF,EAAcA,EAAYgB,KAAK,SAACC,EAAKC,GAAN,OAC9B,kBAAC3B,EAAD,CACE4B,MAAK,UAAKF,EAAIG,YACdC,IAAG,sCAAiCJ,EAAIK,WAArC,kBAAyDL,EAAIG,YAChEG,IAAKL,OAEF,6CCvEOM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5B,GACLF,QAAQE,MAAMA,EAAM6B,c","file":"static/js/main.2a4a4c76.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport Button from \"@material-ui/core/Button\";\nimport './App.css';\n\nconst colors = {\n  white: \"rgba(250, 250, 250, 1.0)\",\n  gray: \"rgba(0, 0, 0, 0.75)\"\n};\n\nconst TextArea = styled.textarea`\n\n`;\n\nconst Wrapper = styled.div`\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst Header = styled.div`\n  width: 100vw;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n\n  padding: 0.9rem;\n  box-sizing: border-box;\n  padding-left: 1.1rem;\n  background: ${colors.white};\n\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst StyledIFrame = styled.iframe`\n  width: 70vw;\n  height: 70vh;\n  margin-top: 0.8rem;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n`;\n\nconst FetchButton = styled(Button)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nfunction App() {\n  const [user_id, set_user_id] = React.useState(undefined);\n  const [submissions, set_submissions] = React.useState([]);\n\n  const fetch_user_submissions = async () => {\n    try {\n      const fetch_url = `https://kenkoooo.com/atcoder/atcoder-api/results?user=${user_id}`;\n      const res = await fetch(fetch_url);\n      const user_submissions = await res.json();\n\n      console.log(user_submissions);\n\n      set_submissions(user_submissions);\n    } catch(e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <Wrapper>\n      <Header>\n        AtCoder User Submission List (ver. Î±)\n\n        <TextArea onClick={e => set_user_id(e.target.value)}></TextArea>\n\n        <Button onClick={async () => { await fetch_user_submissions(); }}>Fetch User Submissons</Button>\n      </Header>\n\n      {submissions ? submissions.map( (sub, idx) => (\n        <StyledIFrame\n          title={`${sub.problem_id}`}\n          src={`https://atcoder.jp/contests/${sub.contest_id}/tasks/${sub.problem_id}`}\n          key={idx}\n        />\n       )) : (<div>Loading...</div>)}\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}